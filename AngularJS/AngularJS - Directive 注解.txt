AngularJS - Directive 注解
// 2016-01-16, Gavin
// 官网
https://docs.angularjs.org/guide/directive

// 中文参考
https://gitcafe.com/Angularjs/Angularjs-Developer-Guide/blob/master/AngularJS%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%9705%EF%BC%9A%E6%8C%87%E4%BB%A4.md

restrict
------------------
	// 可选
	// 规定指令定义的格式。建议采用第一种或第二种
	A 		// 元素  	<div my-directive></div>
	E		// 属性		<my-directive></my-directive>
	C		// 类名		<div class="my-directive"></div>
	M		// 注释		<!--my-directive-->
------------------


priority
------------------
	// 可选
	// 优先级参数
	// 当一个DOM上有多个指令时，有会需要指定指令执行的顺序。
------------------


terminal
------------------
	// 可选
	// 停止运行当前元素上比本指令优先级低的指令
------------------


template
------------------
	// 可选
	// 用模板内容将当前的元素替换掉。
------------------


templateUrl
------------------
	// 可选
	// 用URL中的内容将当前的元素替换掉。
	// 因为模板加载是异步的，所有编译和链接都会等到加载完成后再执行。
------------------


replace
------------------
	// 可选
	// 值：true
	// 如果被设置成true那么现在的元素会被模板替换，而不是被插入到元素中。
------------------


scope
------------------
	// 可选
	// 为当前指令创建一个新的作用域。
	@			// 本地作用域。将本地作用域成员成员和DOM属性绑定。
	=			// 双向绑定。在本地作用域属性和父作用域属性间建立一个双向的绑定。
	&			// 父级作用域。提供了一种能在父作用域下执行表达式的方法。如果没有指定父作用域属性名称，那就和本地名称一样。
------------------


transclude
------------------
	// 可选
	// 值：true / false
	// 现在的元素不会被模板替换掉。现在的元素插入到模板中。用于指令的相互调用。
------------------


controller
------------------
	// 可选
	// 控制器
	$scope			// 当前元素关联的作用域。
	$element		// 当前元素
	$Attrs			// 当前元素的属性对象
	$transclude		//  模板链接功能前绑定到正确的模板作用域  ??
------------------


controllerAs
------------------
	// 可选
	// 设置控制器的别名
------------------


require
------------------
	// 可选
	// 查找控制器
	?			// 不要触发错误。如果当前指令中没有找到所需要的控制器，会将null传给link函数的第4个参数
	^			// 没找到的话，在父元素的controller里面也查找有没有控制器.
	?^			// 将前面两个选项的行为组合起来
	无前缀		// 在自身所提供的控制器中查找，如果没有找到任何控制器，就抛出一个错误。
------------------


link
function link(scope, element, Attrs, controller) { ... }
------------------
	// 可选
	// 创建可以操作DOM的指令
	scope			// 指令需要监听的作用域。

	element 		// instance element - 指令所在的元素。
					// 只有在postLink函数中对元素的子元素进行操作才是安全的，因为那时它们才已经全部连接好。

	Attrs 			// 实例属性，一个标准化的、所有声明在当前元素上的属性列表，这些属性在所有链接函数间是共享的。
	
	controller 		// 控制器实例，如果至少有一个指令定义了控制器，那么这个控制器就会被传递。
					// 控制器也是指令间共享的，指令可以用它来相互通信。
------------------


compile
function compile(tElement, tAttrs, transclude) { ... }
------------------
	// 可选
	// 编译函数，用来处理需要修改模板DOM的情况的。
	// 和link互斥
	tElement 	// template element - 指令所在的元素。
				// 对这个元素及其子元素进行变形之类的操作是安全的。

	tAttrs 		// template attributes - 这个元素上所有指令声明的属性.
				// 这些属性都是在编译函数里共享的， 参考章节“属性”。

	transclude 	// 一个嵌入的链接函数function(scope, cloneLinkingFn)

	// 如果模板被克隆了，那么模版实例和链接实例可能不是同一个对象。 
	// 所以在编译函数不要进行任何DOM变形之外的操作。 
	// 更重要的，DOM监听事件的注册应该在链接函数中做，而不是编译函数中。
------------------


AngularJS 内置指令
------------------
	ng-app			// 应用初始化

	ng-bind			// 数据绑定

	ng-controller	// 嵌套在指令中的子作用域

	ng-form			// 表单？

	ng-include		// 加载、编译并包含外部HTML片段到当前的应用中

	ng-init			// 设置内部作用域的初始状态

	ng-model		// 将input, select, text area 控件同作用域中的属性进行绑定

	ng-repeat		// 遍历

	ng-switch		// ??

	ng-view			// ??

------------------