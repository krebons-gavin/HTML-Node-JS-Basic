AngularJS - Directive 注解
// 2016-01-16, Gavin
// 官网
https://docs.angularjs.org/guide/directive
// 官网-参数列表-英文
https://docs.angularjs.org/api/ng/service/$compile

// 中文参考
https://gitcafe.com/Angularjs/Angularjs-Developer-Guide/blob/master/AngularJS%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%9705%EF%BC%9A%E6%8C%87%E4%BB%A4.md


参数示例
------------------
	angular.module('myApp', []) 

	.directive('myDirective', function() { 
	  return { 
	    restrict: String, 
	    
	    priority: Number, 
	    
	    terminal: Boolean, 
	    
	    template: String or Template Function: 
	  function(tElement, tAttrs) {...}, 
	  
	  templateUrl: String, 
	  
	  // 替换：用指令的内容替换掉里面别的内容
	  replace: Boolean or String, 
	  
	  // 独立scope,确保指令之间不会相互影响
	  scope: Boolean or Object, 
	  
	  // 内部内容是否可以变换和嵌套
	  transclude: Boolean, 
	  
	  // controller: 暴露出一组方法或者属性，供外部调用
	  controller: String or 
	  function(scope, element, attrs, transclude, otherInjectables) { ... }, 
	  
	  controllerAs: String, 
	  
	  // 是否依赖于其他外部指令
	  // 如果依赖于其他指令，自动注入该指令的Controller
	  require: String, 
	  
	  // Link: 链接
	  // 链接阶段处理指令内部的事务，如给元素绑定事件，绑定数据等。
	  // 编译函数(compile)负责对模板DOM进行转换。链接函数(link)负责将作用域和DOM进行链接。
	  link: function(scope, iElement, iAttrs) { ... }, 
	  
	  // Compile：编译
	  // 在编译的阶段，angularJs会遍历整个的文档并根据JavaScript中指令定义来处理页面上什么的指令。
	  // 一但遍历和编译完毕就会返回一个叫做模板函数的函数。
	  // 在这个函数没被返回（return）之前我们可以对编译后的DOM树进行修改。
	  // 通常情况下，如果设置了compile函数，说明我们希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。
	  // compile 返回一个对象或连接函数，如下所示：
	  compile: 
	  function(tElement, tAttrs, transclude) { 
	    return { 
	      pre: function(scope, iElement, iAttrs, controller) { ... }, 
	      
	      post: function(scope, iElement, iAttrs, controller) { ... } 
	      } 
	    // 当我们设置了link选项，实际上是创建了一个postLink() 链接函数，以便compile() 函数可以定义链接函数。
	    return function postLink(...) { ... } 
	    } 

	  }; 

	 });
------------------


restrict
------------------
	// 可选
	// 规定指令定义的格式。建议采用第一种或第二种
	A 		// 属性  	<div my-directive></div>
	E		// 元素		<my-directive></my-directive>
	C		// 类名		<div class="my-directive"></div>
	M		// 注释		<!--my-directive-->
			// 最后一种方式建议再不要求逼格指数的时候千万不要用。
------------------


priority
------------------
	// 可选
	// 优先级参数
	// 当一个DOM上有多个指令时，有会需要指定指令执行的顺序。
------------------


terminal
------------------
	// 可选
	// 停止运行当前元素上比本指令优先级低的指令
------------------


template
------------------
	// 可选
	// 用模板内容将当前的元素替换掉。
------------------


templateUrl
------------------
	// 可选
	// 用URL中的内容将当前的元素替换掉。
	// 因为模板加载是异步的，所有编译和链接都会等到加载完成后再执行。
------------------


replace
------------------
	// 可选
	// 值：true
	// 如果被设置成true,那么现在的元素会被模板替换，而不是被插入到元素中。
------------------


scope
------------------
	// 可选
	// 作用1：独立scope,确保指令之间不会相互影响.
	// 作用2：数据绑定。绑定策略如下：
	@			// 本地作用域。将本地作用域成员成员和DOM属性绑定。
				// 传递的是字符串，不是对象

	=			// 双向绑定。在本地作用域属性和父作用域属性间建立一个双向的绑定。
				// 控制器和指令中的数据同时发生改变

	&			// 父级作用域。调用父作用域中的函数
				// 传递的是函数
------------------


transclude
------------------
	// 可选
	// 值：true / false
	// 嵌套。现在的元素不会被模板替换掉。现在的元素插入到模板中。用于指令的相互调用。
	// 如果指令使用了transclude参数，那么在控制器无法正常监听数据模型的变化了。建议在链接函数里使用$watch服务。
------------------


controller
------------------
	// 可选
	// controller参数可以是一个字符串或一个函数。
	// 可以在指令内部通过匿名构造函数的方式来定义一个内联的控制器.
	// 我们可以将任意可以被注入的ng服务注入到控制器中，便可以在指令中使用它了。
	// 控制器中也有一些特殊的服务可以被注入到指令当中。这些服务有：
	$scope			// 与指令元素相关联的当前作用域。

	$element		// 当前指令对应的元素。

	$Attrs			// 由当前元素的属性组成的对象。
					// 	<div id="aDiv"class="box"></div>
					// 具有如下的属性对象：
					// { 
					// id: "aDiv", 
					// class: "box" 
					// } 

	$transclude		// 嵌入链接函数会与对应的嵌入作用域进行预绑定。
					// transclude链接函数是实际被执行用来克隆元素和操作DOM的函数。
------------------


controllerAs
------------------
	// 可选
	// 设置控制器的别名
------------------


require
------------------
	// 可选
	// require为字符串，代表另外一个指令的名字。
	// 依赖于其他指令，自动注入依赖的指令的Controller。
	// require会将控制器注入到其所指定的指令中，并作为当前指令的链接函数的第四个参数。
	?			// 不要触发错误。如果当前指令中没有找到所需要的控制器，会将null传给link函数的第4个参数
	^			// 没找到的话，在父元素的controller里面也查找有没有控制器.
	?^			// 将前面两个选项的行为组合起来
	无前缀		// 在自身所提供的控制器中查找，如果没有找到任何控制器，就抛出一个错误。
------------------


link
function link(scope, element, attrs, controller, transcludeFn) { ... }
------------------
	// 可选
	// 创建可以操作DOM的指令
	// 链接函数负责注册DOM事件和更新DOM。它是在模板被克隆之后执行的。 它也是大部分指令逻辑代码编写的地方。
	scope			// 指令需要监听的作用域。

	element 		// instance element - 指令所在的元素。
					// 只有在postLink函数中对元素的子元素进行操作才是安全的，因为那时它们才已经全部连接好。

	Attrs 			// 实例属性，一个标准化的、所有声明在当前元素上的属性列表，这些属性在所有链接函数间是共享的。
	
	controller 		// 控制器实例，如果至少有一个指令定义了控制器，那么这个控制器就会被传递。
					// 控制器也是指令间共享的，指令可以用它来相互通信。
------------------


compile
function compile(tElement, tAttrs, transclude) { ... }
------------------
	// 可选
	// 编译函数是用来处理需要修改模板DOM的情况的。
	// 希望在指令和实时数据被放到DOM中之前进行DOM操作，在这个函数中进行诸如添加和删除节点等DOM操作是安全的。
	// 和link互斥.如果同时设置了这两个选项，那么会把compile所返回的函数当作链接函数，而link选项本身则会被忽略。
	tElement 	// template element - 指令所在的元素。
				// 对这个元素及其子元素进行变形之类的操作是安全的。

	tAttrs 		// template attributes - 这个元素上所有指令声明的属性.
				// 这些属性都是在编译函数里共享的， 参考章节“属性”。

	transclude 	// 一个嵌入的链接函数function(scope, cloneLinkingFn)

	// 如果模板被克隆了，那么模版实例和链接实例可能不是同一个对象。 
	// 所以在编译函数不要进行任何DOM变形之外的操作。 
	// 更重要的，DOM监听事件的注册应该在链接函数中做，而不是编译函数中。
------------------


AngularJS 内置指令
------------------
	ng-app			// 应用初始化

	ng-bind			// 数据绑定

	ng-controller	// 嵌套在指令中的子作用域

	ng-form			// 表单？

	ng-grid			// 封装Data Grid控件

	ng-include		// 加载、编译并包含外部HTML片段到当前的应用中

	ng-init			// 设置内部作用域的初始状态

	ng-model		// 将input, select, text area 控件同作用域中的属性进行绑定

	ng-repeat		// 遍历

	ng-switch		// ??

	ng-view			// ??

------------------